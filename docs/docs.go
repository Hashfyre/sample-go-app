// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-05-18 22:16:59.973312 +0530 IST m=+0.025548330

package docs

import (
	"bytes"
	"encoding/json"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "A sample microservice built using gin, gorm",
        "title": "sample-go-app",
        "contact": {},
        "license": {},
        "version": "0.1"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/api/users/signup/": {
            "post": {
                "description": "registers user and returns a access token along with response",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "user registration",
                "parameters": [
                    {
                        "description": "user registration",
                        "name": "value",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/types.RegisterRequestDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Could not bind request data, may contain unknown or missing fields",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "user not created",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/users/": {
            "get": {
                "description": "get all users from the database",
                "produces": [
                    "application/json"
                ],
                "summary": "fetch all users from the database",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Header",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/types.GetUserResponseDto"
                        }
                    },
                    "400": {
                        "description": "User info not present in context",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "summary": "delete a user based on userID provided",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Header",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "User info not present in context",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unable to delete user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "update a cluster by changing any fields -\u003e firstname | lastname",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "updates user based on details provided",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Header",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "update cluster",
                        "name": "value",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/types.BasicProfileDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "uUser details updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "User info not present in context",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Unable to update user",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/users/password/": {
            "patch": {
                "description": "update a password by providing  -\u003e current-password | new-password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "updates password with new password provided",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Header",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "update password",
                        "name": "value",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/types.ChangePasswordDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "password updated sucessfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "User info not present in context",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "invalid user name or password",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "unable to change password",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "types.BasicProfileDto": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                }
            }
        },
        "types.ChangePasswordDto": {
            "type": "object",
            "required": [
                "currentPassword",
                "newPassword"
            ],
            "properties": {
                "currentPassword": {
                    "type": "string"
                },
                "newPassword": {
                    "type": "string"
                }
            }
        },
        "types.GetUserResponseDto": {
            "type": "object",
            "required": [
                "ID",
                "email",
                "firstName",
                "lastName"
            ],
            "properties": {
                "ID": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                }
            }
        },
        "types.RegisterRequestDto": {
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{ Schemes: []string{}}

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface {}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
